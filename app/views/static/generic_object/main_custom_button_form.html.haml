%form.form-horizontal{"name"         => "angularForm",
                      "model-copy"   => "vm.modelCopy",
                      "model"        => "vm.customButtonModel",
                      "ng-show"      => "vm.afterGet",
                      "ng-cloak"     => "",
                      "form-changed" => true,
                      "novalidate"   => true,
                      "miq-form"     => true}
  .form-group{"ng-class" => "{'has-error': angularForm.button_type.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_button_type"}
      = _("Button Type")
    .col-md-8{:style => "width: 100px", "ng-class" => "{'has-error': angularForm.button_type.$invalid}"}
      %select{"name"                        => "button_type",
              "ng-model"                    => "vm.customButtonModel.button_type",
              "ng-options"                  => "button_type.id as button_type.name for button_type in vm.button_types",
              "required"                    => "",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
      %span.help-block{"ng-show" => "angularForm.button_type.$error.required"}
        = _("Required")
  .form-group{"ng-if"    => "vm.customButtonModel.button_type == 'ansible_playbook'",
              "ng-class" => "{'has-error': angularForm.playbook_catalog_item.$invalid}"}
    %label.control-label.col-md-2
      = _("Playbook Catalog Item")
    .col-md-8
      %select{"name"                        => "playbook_catalog_item",
              "ng-model"                    => "vm.customButtonModel.uri_attributes.service_template",
              "ng-options"                  => "item.id as item.name for item in vm.templates",
              "data-live-search"            => "true",
              "selectpicker-for-select-tag" => "",
              :required                     => true,
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
      %span.help-block{"ng-show" => "angularForm.playbook_catalog_item.$error.required"}
        = _("Required")
  .form-group{"ng-if" => "vm.customButtonModel.button_type == 'ansible_playbook'"}
    %label.control-label.col-md-2
      = _("Inventory")
    .col-md-8
      %input{:name => "inventory", :type => "radio", :id => "inventory_localhost", :value => "localhost", 'ng-model' => 'vm.inventory'}
      = label_tag('inventory_localhost', _("Localhost"), "title" => _('Run on localhost'))
      %br
      %input{:name => "inventory", :type => "radio", :id => "inventory_event_target", :value => "event_target", 'ng-model' =>  "vm.inventory"}
      = label_tag('inventory_event_target', _("Target Machine"), "title" => _('Run on the target of the Policy Event'))
      %br
      %input{:name => "inventory",
      :type => "radio", :id => "inventory_manual", :value => "manual", 'ng-model' =>  "vm.inventory"}
      = label_tag('inventory_manual', _("Specific Hosts"))
      #manual_inventory_div{'ng-if' => "vm.inventory === 'manual'"}
        .form-group
          .col-md-8
            %input{:type => 'text', :maxlength => ViewHelper::MAX_DESC_LEN, "ng-model" => "vm.customButtonModel.uri_attributes.hosts", :class => 'form-control'}
            = _('Enter a comma separated list of IP or DNS names')
  %custom-button-group-form{"model"        => "vm.customButtonModel",
                            "angular-form" => "angularForm"}
  .form-group{"ng-class" => "{'has-error': angularForm.dialog.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_dialog_id"}
      = _("Dialog")
    .col-md-8{"ng-if" => "vm.dialogs", :style => "width: 100px", "ng-class" => "{'has-error': angularForm.dialog_id.$invalid}"}
      %select{"name"                        => "dialog",
              "ng-model"                    => "vm.customButtonModel.dialog_id",
              "ng-options"                  => "dialog.id as dialog.label for dialog in vm.dialogs",
              "data-live-search"            => "true",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
  .form-group{"ng-class" => "{'has-error': angularForm.display_for.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_display_for"}
      = _("Display for")
    .col-md-8{"ng-if" => "vm.display_for", :style => "width: 100px", "ng-class" => "{'has-error': angularForm.display_for.$invalid}"}
      %select{"name"                        => "display_for",
              "ng-model"                    => "vm.customButtonModel.display_for",
              "ng-options"                  => "display_for.id as display_for.name for display_for in vm.display_for",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
  .form-group{"ng-class" => "{'has-error': angularForm.submit_how.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_submit_how"}
      = _("Submit")
    .col-md-8{"ng-if" => "vm.submit_how", :style => "width: 100px", "ng-class" => "{'has-error': angularForm.submit_how.$invalid}"}
      %select{"name"                        => "submit_how",
              "ng-model"                    => "vm.customButtonModel.submit_how",
              "ng-options"                  => "submit_how.id as submit_how.name for submit_how in vm.submit_how",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
  .form-group{"ng-class" => "{'has-error': angularForm.ae_instance.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_ae_instance"}
      = _("System/Process")
    .col-md-8{"ng-if" => "vm.submit_how", :style => "width: 100px", "ng-class" => "{'has-error': angularForm.ae_instance.$invalid}"}
      %select{"name"                        => "ae_instance",
              "ng-model"                    => "vm.customButtonModel.ae_instance",
              "ng-options"                  => "ae_instance.id as ae_instance.name for ae_instance in vm.ae_instances",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
        %option{"value" => "", "disabled" => ""}
          = "<#{_('Choose')}>"
  .form-group{"ng-class" => "{'has-error': angularForm.ae_message.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_ae_message"}
      = _("Message")
    .col-md-8
      %input.form-control{"type"        => "text",
                          "id"          => "custom_button_ae_message",
                          "name"        => "ae_message",
                          "ng-model"    => "vm.customButtonModel.ae_message",
                          "maxlength"   => ViewHelper::MAX_NAME_LEN}
  .form-group{"ng-class" => "{'has-error': angularForm.request.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_request"}
      = _("Request")
    .col-md-8
      %input.form-control{"type"        => "text",
                          "id"          => "custom_button_request",
                          "name"        => "request",
                          "ng-model"    => "vm.customButtonModel.request",
                          "maxlength"   => ViewHelper::MAX_NAME_LEN,
                          "required"    => ""}
      %span.help-block{"ng-show" => "angularForm.request.$error.required"}
        = _("Required")
  .form-group
    %label.col-md-2.control-label{"for" => "custom_button_attribute_value_pairs"}
      = _("Attribute/Value Pairs")
    .col-md-8
      %generic-object-table{"keys"             => "vm.customButtonModel.attribute_names",
                            "values"           => "vm.customButtonModel.attribute_values",
                            "add-row-text"     => _("Add Attribute/Value Pair"),
                            "key-type"         => "Attribute",
                            "table-headers"    => "vm.attributeValueTableHeaders",
                            "orig-keys-values" => "vm.customButtonModel.resource_action.ae_attributes",
                            "table-changed"    => "vm.customButtonModel.attributeValuesTableChanged",
                            "required-rule"    => "vm.noOfRows > 1",
                            "new-record"       => "vm.newRecord",
                            "no-of-rows"       => "vm.customButtonModel.noOfAttributeValueRows",
                            "table-rendered"   => "vm.tableRendered",
                            "add-value-column" => "true",
                            "no-pattern"       => "true",
                            "angular-form"     => "angularForm"}
  .form-group{"ng-class" => "{'has-error': angularForm.visibility.$invalid}"}
    %label.col-md-2.control-label{"for" => "custom_button_visibility"}
      = _("Role Access")
    .col-md-8{:style => "width: 100px", "ng-class" => "{'has-error': angularForm.visibility.$invalid}"}
      %select{"name"                        => "visibility",
              "ng-model"                    => "vm.customButtonModel.current_visibility",
              "ng-options"                  => "visibility.id as visibility.name for visibility in vm.visibilities",
              "selectpicker-for-select-tag" => "",
              "miq-select"                  => true,}
      %span.help-block{"ng-show" => "angularForm.visibility.$error.required"}
        = _("Required")
  %br
  %br
  .form-group{"ng-if" => "vm.customButtonModel.current_visibility === 'role'"}
    %label.col-md-2.control-label{"for" => "custom_button_open_url"}
      = _("User Roles")
    .col-md-8
      %table{"ng-repeat" => "role in vm.customButtonModel.available_roles track by $index"}
        %td{:nowrap => true}
          %input.form-control{"type"            => "checkbox",
                              "id"              => "role{{$index}}",
                              "name"            => "role{{$index}}",
                              "bs-switch"       => "",
                              "switch-on-text"  => _('Yes'),
                              "switch-off-text" => _('No'),
                              :data             => {:size => 'mini'},
                              "ng-model"        => "vm.customButtonModel.available_roles[$index].value"}
          {{vm.customButtonModel.available_roles[$index].name}}
  = render :partial => "layouts/angular/generic_form_buttons"
